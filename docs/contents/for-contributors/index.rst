============================
Information for contributors
============================

This section briefly describes the project structure and framework that was
used to built this project.

Backend
=======

The backend is implemented in the Python_ programming language, using the
Django_ web framework.

There is quite a bit of boilerplate involved, which is mostly solved by the
shared library vng-api-common_, maintained by VNG Realisatie. It provides
tooling for commonly used patterns and takes care of the generation of the API
schema.

Project structure
-----------------

* ``nrc.datamodel`` is the Django app containing the underlying database
  definitions.
* ``nrc.api`` is a the Django app that exposes the API endpoints. It is
  built on top of ``nrc.datamodel`` and ``vng_api_common``
* ``nrc.conf`` contains the Django settings and other configuration
* ``nrc.logviewer`` is a simple frontend to visualize what's going on

Updating/adding dependencies
----------------------------

We use `pip-tools`_ to pin our entire dependency tree. Dependencies required
for the 'production' runtime should be added to ``requirements/base.in``,
testing dependencies go in ``requirements/testing.in`` and tooling that is
local-development only goes in ``requirements/dev.in``.

You update the entire dependency tree by running:

.. code-block:: bash

    ./bin/compile_dependencies.sh

If you wish to update a library, a useful command is (for example, updating
vng-api-common):

.. code-block:: bash

    pip-compile requirements/base.in -P vng-api-common
    ./bin/compile_dependencies.sh

Generating the schema
---------------------

Run:

.. code-block:: bash

    npm install

to install the required NodeJS dependencies (``swagger2openapi``).

Whenever you make changes to the API, be it changing help-texts in the
datamodel or modifying docstrings in viewsets, you should re-generate the schema:

.. code-block:: bash

    generate_schema

.. _Python: https://www.python.org/
.. _Django: https://www.djangoproject.com/
.. _vng-api-common: https://pypi.org/project/vng-api-common/
.. _pip-tools: https://pypi.org/project/pip-tools/

Frontend
========

While this project is very light on frontend, we should stick to the following
guidelines:

CSS
---

CSS code is generated by SASS, we use the .scss syntax. We prefer a component based
approach using the BEM_ methodology.

In addition to BEM we limit the scope of components to the "border-box" preventing
components from defining a margin on itself. Parent components control the margins
of its children.

The view is a component without parents and should be directly linked to a template.
It's role is to "orchestrate" child components.

To compile SASS to CSS run ::

    $ gulp sass

To create a new component run ::

    $ gulp create-component --name my-compoment-name --scss

To create a new view run ::

    $ gulp create-view --name my-compoment-name --scss

.. _BEM: https://en.bem.info/methodology/key-concepts/

JavaScript
----------

JavaScript code is written in ECMAScript 2015 (ES6) and transpiled using webpack
and babel. Therefore, all non-compiled code is placed outside the static directory
into ``src/nrc/js/``.

We write modules for every component/view matching the BEM structure provides by
SASS.

Compiling ES6 to ES5 ::

    $ gulp js

To create a new component run ::

    $ gulp create-component --name my-compoment-name --js

To create a new view run ::

    $ gulp create-view --name my-compoment-name --js

All third party libraries should be installed using npm ::

    $ npm install --save <package>

or ::

    $ npn install --save-dev <package>

After installing libraries can be included using ES6 imports ::

    import <package> from '<package>';

**Exceptions**

When you need to override third-party JavaScript you still need to manually place
files into ``src/nrc/static/``.

Further reading
===============

.. toctree::
    :maxdepth: 3
    :caption: Contents:

    coding-style/index
